# ============================================================================
# KWALA Workflow #1: Automated Application Review
# Listens for ApplicationSubmitted events and automatically reviews/approves
# ============================================================================

Name: "EduChain-Auto-Review-Applications"

Execution:
  Mode: "sequential"

Trigger:
  TriggerChainID: 11155111  # Sepolia Testnet
  TriggerSourceContract: "0xYOUR_POOL_ADDRESS_HERE"  # Replace with actual pool
  TriggerSourceContractABI: '[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"student","type":"address"},{"indexed":false,"internalType":"string","name":"dataHash","type":"string"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"ApplicationSubmitted","type":"event"}]'
  TriggerEventName: "ApplicationSubmitted"
  TriggerEventFilter: "{}"
  Meta: "Triggers when student submits scholarship application"

Actions:
  # ============================================================================
  # Action 1: Call Backend API to Review Application
  # ============================================================================
  - Name: "ReviewApplicationData"
    Type: "api"
    APIEndpoint: "https://your-backend-url.com/api/kwala/review-application"
    APIPayload: '{"studentAddress": "{{event.student}}", "dataHash": "{{event.dataHash}}", "poolAddress": "{{contract.address}}"}'
    RetriesUntilSuccess: 3
    Metadata: "Fetches IPFS data and validates student eligibility"

  # ============================================================================
  # Action 2: Verify Application On-Chain (if backend approves)
  # ============================================================================
  - Name: "VerifyApplicationOnChain"
    Type: "call"
    TargetContract: "{{contract.address}}"
    TargetFunction: "verifyApplication"
    TargetParams: ["{{event.student}}"]
    EncodedABI: "0x"
    ChainID: 11155111
    RetriesUntilSuccess: 2
    Metadata: "Marks application as email-verified on blockchain"

  # ============================================================================
  # Action 3: Approve Application On-Chain
  # ============================================================================
  - Name: "ApproveApplicationOnChain"
    Type: "call"
    TargetContract: "{{contract.address}}"
    TargetFunction: "approveApplication"
    TargetParams: ["{{event.student}}"]
    EncodedABI: "0x"
    ChainID: 11155111
    RetriesUntilSuccess: 2
    Metadata: "Approves student for scholarship payment"

  # ============================================================================
  # Action 4: Send Email Notification to Student
  # ============================================================================
  - Name: "NotifyStudentApproval"
    Type: "api"
    APIEndpoint: "https://your-backend-url.com/api/kwala/notify-student"
    APIPayload: '{"studentAddress": "{{event.student}}", "status": "approved", "poolAddress": "{{contract.address}}"}'
    RetriesUntilSuccess: 1
    Metadata: "Sends approval confirmation email to student"

# ============================================================================
# REQUIRED SETUP STEPS:
# ============================================================================
# 1. Create a scholarship pool via frontend or factory contract
#    - Copy the pool address from transaction receipt
#
# 2. Get your KWALA wallet address from KWALA dashboard
#    - Format: KWL-0xYourAddress-CC
#    - Extract ETH address: 0xYourAddress
#
# 3. Grant AUTOMATION_ROLE to KWALA wallet:
#    cast send POOL_ADDRESS \
#      "grantRole(bytes32,address)" \
#      $(cast call POOL_ADDRESS "AUTOMATION_ROLE()(bytes32)" --rpc-url RPC_URL) \
#      KWALA_ETH_ADDRESS \
#      --rpc-url https://eth-sepolia.g.alchemy.com/v2/Yv-jZwlxmcykNC7GGC0rh \
#      --private-key YOUR_PRIVATE_KEY
#
# 4. Fund KWALA wallet with Sepolia ETH (for gas fees):
#    cast send KWALA_ETH_ADDRESS \
#      --value 0.05ether \
#      --rpc-url https://eth-sepolia.g.alchemy.com/v2/Yv-jZwlxmcykNC7GGC0rh \
#      --private-key YOUR_PRIVATE_KEY
#
# 5. Purchase KWALA credits via dashboard
#
# 6. Deploy backend to public URL (Render/Railway/Ngrok)
#
# 7. Update this file:
#    - Replace "0xYOUR_POOL_ADDRESS_HERE" with actual pool address
#    - Replace "https://your-backend-url.com" with your backend URL
#
# 8. Upload workflow to KWALA dashboard
#
# 9. Test by submitting an application via frontend
# ============================================================================
